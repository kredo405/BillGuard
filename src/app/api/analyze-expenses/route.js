import { GoogleGenerativeAI } from "@google/generative-ai";
import { NextResponse } from "next/server";

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY || "");

export async function POST(req) {
  try {
    const { expenses } = await req.json();

    if (!expenses || expenses.length === 0) {
      return NextResponse.json({ error: "Нет данных о расходах для анализа" }, { status: 400 });
    }

    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

    const prompt = `
      Проанализируй следующие расходы за последний период. Дай развернутый и полезный анализ в формате markdown.
      Постарайся ответить быстрей чем 10 секунд.
      **Общий обзор:**
      - Какова общая сумма расходов?
      - Какая категория была самой затратной?

      **Анализ по категориям:**
      - Дай разбивку расходов по основным категориям.
      - Укажи, есть ли какие-то необычные или неожиданные траты в какой-либо из категорий.

      **Рекомендации по экономии:**
      - Предложи 3-5 конкретных и практических советов по сокращению расходов на основе предоставленных данных.
      - Посоветуй, на какие категории стоит обратить внимание в первую очередь.

      **Анализ "плохих" покупок:**
      - Определи 1-2 покупки, которые могут быть импульсивными или не самыми обязательными (например, частые походы в кофейни, подписки, которые могли не использоваться).
      - Объясни, почему эти траты могут быть неэффективными в долгосрочной перспективе.

      **Забота о здоровье (если применимо):**
      - Если есть расходы на фастфуд, сладости или алкоголь, мягко обрати на это внимание и предложи более здоровые и экономные альтернативы.

      **Дополнительные инсайты:**
      - Придумай еще один интересный и неочевидный вывод на основе этих данных. Например, о покупательских привычках, времени совершения покупок или потенциальных подписках, о которых пользователь мог забыть.

      **Данные о расходах:**
      ${JSON.stringify(expenses, null, 2)}
    `;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    return NextResponse.json({ analysis: text });

  } catch (error) {
    console.error(error);
return NextResponse.json(
      { error: error.message },
      { status: 500 }
    );
  }
}
